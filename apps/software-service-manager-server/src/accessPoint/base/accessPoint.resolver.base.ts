/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccessPoint } from "./AccessPoint";
import { AccessPointCountArgs } from "./AccessPointCountArgs";
import { AccessPointFindManyArgs } from "./AccessPointFindManyArgs";
import { AccessPointFindUniqueArgs } from "./AccessPointFindUniqueArgs";
import { CreateAccessPointArgs } from "./CreateAccessPointArgs";
import { UpdateAccessPointArgs } from "./UpdateAccessPointArgs";
import { DeleteAccessPointArgs } from "./DeleteAccessPointArgs";
import { Service } from "../../service/base/Service";
import { AccessPointService } from "../accessPoint.service";
@graphql.Resolver(() => AccessPoint)
export class AccessPointResolverBase {
  constructor(protected readonly service: AccessPointService) {}

  async _accessPointsMeta(
    @graphql.Args() args: AccessPointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccessPoint])
  async accessPoints(
    @graphql.Args() args: AccessPointFindManyArgs
  ): Promise<AccessPoint[]> {
    return this.service.accessPoints(args);
  }

  @graphql.Query(() => AccessPoint, { nullable: true })
  async accessPoint(
    @graphql.Args() args: AccessPointFindUniqueArgs
  ): Promise<AccessPoint | null> {
    const result = await this.service.accessPoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccessPoint)
  async createAccessPoint(
    @graphql.Args() args: CreateAccessPointArgs
  ): Promise<AccessPoint> {
    return await this.service.createAccessPoint({
      ...args,
      data: {
        ...args.data,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AccessPoint)
  async updateAccessPoint(
    @graphql.Args() args: UpdateAccessPointArgs
  ): Promise<AccessPoint | null> {
    try {
      return await this.service.updateAccessPoint({
        ...args,
        data: {
          ...args.data,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessPoint)
  async deleteAccessPoint(
    @graphql.Args() args: DeleteAccessPointArgs
  ): Promise<AccessPoint | null> {
    try {
      return await this.service.deleteAccessPoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "service",
  })
  async getService(
    @graphql.Parent() parent: AccessPoint
  ): Promise<Service | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
