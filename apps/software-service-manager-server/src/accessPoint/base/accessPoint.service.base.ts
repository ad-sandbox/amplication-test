/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessPoint as PrismaAccessPoint,
  Service as PrismaService,
} from "@prisma/client";

export class AccessPointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessPointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessPoint.count(args);
  }

  async accessPoints(
    args: Prisma.AccessPointFindManyArgs
  ): Promise<PrismaAccessPoint[]> {
    return this.prisma.accessPoint.findMany(args);
  }
  async accessPoint(
    args: Prisma.AccessPointFindUniqueArgs
  ): Promise<PrismaAccessPoint | null> {
    return this.prisma.accessPoint.findUnique(args);
  }
  async createAccessPoint(
    args: Prisma.AccessPointCreateArgs
  ): Promise<PrismaAccessPoint> {
    return this.prisma.accessPoint.create(args);
  }
  async updateAccessPoint(
    args: Prisma.AccessPointUpdateArgs
  ): Promise<PrismaAccessPoint> {
    return this.prisma.accessPoint.update(args);
  }
  async deleteAccessPoint(
    args: Prisma.AccessPointDeleteArgs
  ): Promise<PrismaAccessPoint> {
    return this.prisma.accessPoint.delete(args);
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.accessPoint
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
}
