/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccessPointService } from "../accessPoint.service";
import { AccessPointCreateInput } from "./AccessPointCreateInput";
import { AccessPoint } from "./AccessPoint";
import { AccessPointFindManyArgs } from "./AccessPointFindManyArgs";
import { AccessPointWhereUniqueInput } from "./AccessPointWhereUniqueInput";
import { AccessPointUpdateInput } from "./AccessPointUpdateInput";

export class AccessPointControllerBase {
  constructor(protected readonly service: AccessPointService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccessPoint })
  async createAccessPoint(
    @common.Body() data: AccessPointCreateInput
  ): Promise<AccessPoint> {
    return await this.service.createAccessPoint({
      data: {
        ...data,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        label: true,
        name: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccessPoint] })
  @ApiNestedQuery(AccessPointFindManyArgs)
  async accessPoints(@common.Req() request: Request): Promise<AccessPoint[]> {
    const args = plainToClass(AccessPointFindManyArgs, request.query);
    return this.service.accessPoints({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        label: true,
        name: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccessPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accessPoint(
    @common.Param() params: AccessPointWhereUniqueInput
  ): Promise<AccessPoint | null> {
    const result = await this.service.accessPoint({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        label: true,
        name: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccessPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccessPoint(
    @common.Param() params: AccessPointWhereUniqueInput,
    @common.Body() data: AccessPointUpdateInput
  ): Promise<AccessPoint | null> {
    try {
      return await this.service.updateAccessPoint({
        where: params,
        data: {
          ...data,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          label: true,
          name: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccessPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccessPoint(
    @common.Param() params: AccessPointWhereUniqueInput
  ): Promise<AccessPoint | null> {
    try {
      return await this.service.deleteAccessPoint({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          label: true,
          name: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
