/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceService } from "../service.service";
import { ServiceCreateInput } from "./ServiceCreateInput";
import { Service } from "./Service";
import { ServiceFindManyArgs } from "./ServiceFindManyArgs";
import { ServiceWhereUniqueInput } from "./ServiceWhereUniqueInput";
import { ServiceUpdateInput } from "./ServiceUpdateInput";
import { AccessPointFindManyArgs } from "../../accessPoint/base/AccessPointFindManyArgs";
import { AccessPoint } from "../../accessPoint/base/AccessPoint";
import { AccessPointWhereUniqueInput } from "../../accessPoint/base/AccessPointWhereUniqueInput";

export class ServiceControllerBase {
  constructor(protected readonly service: ServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Service })
  async createService(
    @common.Body() data: ServiceCreateInput
  ): Promise<Service> {
    return await this.service.createService({
      data: {
        ...data,

        developer: data.developer
          ? {
              connect: data.developer,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Service] })
  @ApiNestedQuery(ServiceFindManyArgs)
  async services(@common.Req() request: Request): Promise<Service[]> {
    const args = plainToClass(ServiceFindManyArgs, request.query);
    return this.service.services({
      ...args,
      select: {
        createdAt: true,
        description: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async service(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    const result = await this.service.service({
      where: params,
      select: {
        createdAt: true,
        description: true,

        developer: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateService(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() data: ServiceUpdateInput
  ): Promise<Service | null> {
    try {
      return await this.service.updateService({
        where: params,
        data: {
          ...data,

          developer: data.developer
            ? {
                connect: data.developer,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,

          developer: {
            select: {
              id: true,
            },
          },

          id: true,
          label: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteService(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    try {
      return await this.service.deleteService({
        where: params,
        select: {
          createdAt: true,
          description: true,

          developer: {
            select: {
              id: true,
            },
          },

          id: true,
          label: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/accessPoints")
  @ApiNestedQuery(AccessPointFindManyArgs)
  async findAccessPoints(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<AccessPoint[]> {
    const query = plainToClass(AccessPointFindManyArgs, request.query);
    const results = await this.service.findAccessPoints(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        label: true,
        name: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accessPoints")
  async connectAccessPoints(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AccessPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessPoints: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accessPoints")
  async updateAccessPoints(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AccessPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessPoints: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accessPoints")
  async disconnectAccessPoints(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AccessPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessPoints: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
